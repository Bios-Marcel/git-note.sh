#!/bin/bash

#
# Made by Marcel Schramm on 09.06.2018
#
# This is a demo script which aims to demonstrate the workflow of an app that allows taking notes which are persisted and synchronized using git.
#
# This script depends on:
#   - git
#   - nano
#
# This script aims to be posix compatible.
#

#
# Configuration
#

# Fileeditor to use, the default is nano.
readonly fileeditor=nano
    
# Retrieve the name of the scriptfile itself.
readonly ProgName=$(basename $0)

#
# User-callable commands
#
# All functions starting with 'sub_' are user-callable commands and most commands also have a 'help' subcommand.
# The help subcommand method look the following: 'sub_$command_help'
#

#
# Short descriptions for every commands
#
readonly helpDesc="Displays the available commands (which you are seeing right now)."
readonly setupDesc="Initializes the current folder to be used with $ProgName."
readonly createDesc="Creates a new note."
readonly editDesc="Edit a existing note."
readonly deleteDesc="Delete a existing note."

function sub_help(){
    echo "Available subcommands:"
    echo "    * help: $helpDesc"
    echo "    * setup: $setupDesc"
    echo "    * create $createDesc"
    echo "    * edit $editDesc"
    echo "    * delete $deleteDesc"
    echo "Type '$ProgName subcommand help' for additional command information."
}

function sub_setup(){
    if [ -d .git ]; then
        echo "Directory has already been initialized."
        exit 1
    fi

    echo "Initializing git repository."
    git init

    echo "Please add a remote repository."
    read remote
    git remote add origin $remote
    git remote -v

    # Initially get all notes if any are present
    git pull
}

function sub_setup_help() {
    echo "Usage: $ProgName setup [--help]"
    echo ""
    echo "$setupDesc"
}

function sub_create(){
    if [ -f $1 ]; then
        echo "A note named $newName already exists, do you want to edit the existing note instead? (y/n)"
        read answer
        if [ "$answer" != "${answer#[Yy]}" ] ;then
            $fileeditor $1
            git commit $1 -m "Note $1 has been edited"
        fi
    else
        echo "" >> $1
        $fileeditor $1
        git stage $1
        git commit $1 -m "Note $1 has been created."
    fi

    git_push
}

function sub_delete(){
    if [ -f $1 ]; then
        rm $1
        git commit $1 -m "Note $1 has been deleted"
    else
        echo "Note $1 doesn't exist. No action will be executed."
    fi

    git_push
}

function sub_edit(){
    if [ -f $1 ]; then
        $fileeditor $1
        git commit $1 -m "Note $1 has been edited."
    else
        echo "Note $1 doesn't exist, do you want to create the note instead? (y/n)"
        read answer
        if [ "$answer" != "${answer#[Yy]}" ] ;then
            echo "" >> $1
            $fileeditor $1
            git stage $1
            git commit $1 -m "Note $1 has been created."
        fi
    fi

    git_push
}

function sub_sync(){
    git pull
    # TODO: Resolve conflicts?
    git_push
}

function git_push(){
    git push -u origin master
}

# Executed requested command
subcommand=$1
case $subcommand in
    # Special treatment for help since it can be called multiple ways and should always be callable
    "" | "help" | "-help" | "--help" | "-h" | "--h")
        sub_help
        ;;
    # Performing checks and executing given subcommands
    *)
        subcommandParameter=$2
        case $subcommandParameter in
            "--help" | "-help" | "-h" | "--h")
                sub_${subcommand}_help
                ;;
            *)
                # Special treatmeant for setup as it should always be possible to call it
                if [ ! "setup" = "$subcommand" ]; then
                    if [ -d .git ]; then
                        echo "TODO: Initital steps on script start"
                        # TODO: Initial steps on script start
                    else
                        echo "Directory hasn't been setup to be used with $ProgName."
                        echo "    Type $ProgName setup to initialize the directory."

                        exit 1
                    fi
                fi

                shift
                sub_${subcommand} $@
                ;;
        esac

        if [ $? = 127 ]; then
            echo "Error: '$@' is not a known command." >&2
            echo "       Run '$ProgName help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac
